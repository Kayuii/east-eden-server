// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package selector

import (
	"path"

	"e.coding.net/mmstudio/blade/kvs"
)

type Options struct {
	Registry             kvs.RegistryV2
	RegistryPathResolver func(serviceKey string) string
}

func (cc *Options) SetOption(opt Option) {
	_ = opt(cc)
}

func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *Options) GetSetOption(opt Option) Option {
	return opt(cc)
}

type Option func(cc *Options) Option

func WithRegistry(v kvs.RegistryV2) Option {
	return func(cc *Options) Option {
		previous := cc.Registry
		cc.Registry = v
		return WithRegistry(previous)
	}
}
func WithRegistryPathResolver(v func(serviceKey string) string) Option {
	return func(cc *Options) Option {
		previous := cc.RegistryPathResolver
		cc.RegistryPathResolver = v
		return WithRegistryPathResolver(previous)
	}
}

func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

func InstallOptionsWatchDog(dog func(cc *Options)) {
	watchDogOptions = dog
}

var watchDogOptions func(cc *Options)

func newDefaultOptions() *Options {

	cc := &Options{}

	for _, opt := range [...]Option{
		WithRegistry(nil),
		WithRegistryPathResolver(func(serviceKey string) string {
			return path.Join("/sandwich/service", serviceKey)
		}),
	} {
		_ = opt(cc)
	}

	return cc
}

type SelectOptions struct {
	Filters  []Filter
	Strategy Strategy
}

func (cc *SelectOptions) SetOption(opt SelectOption) {
	_ = opt(cc)
}

func (cc *SelectOptions) ApplyOption(opts ...SelectOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *SelectOptions) GetSetOption(opt SelectOption) SelectOption {
	return opt(cc)
}

type SelectOption func(cc *SelectOptions) SelectOption

func WithFilters(v ...Filter) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.Filters
		cc.Filters = v
		return WithFilters(previous...)
	}
}
func WithStrategy(v Strategy) SelectOption {
	return func(cc *SelectOptions) SelectOption {
		previous := cc.Strategy
		cc.Strategy = v
		return WithStrategy(previous)
	}
}

func NewSelectOptions(opts ...SelectOption) *SelectOptions {
	cc := newDefaultSelectOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogSelectOptions != nil {
		watchDogSelectOptions(cc)
	}
	return cc
}

func InstallSelectOptionsWatchDog(dog func(cc *SelectOptions)) {
	watchDogSelectOptions = dog
}

var watchDogSelectOptions func(cc *SelectOptions)

func newDefaultSelectOptions() *SelectOptions {

	cc := &SelectOptions{}

	for _, opt := range [...]SelectOption{
		WithFilters(nil...),
		WithStrategy(RoundRobin),
	} {
		_ = opt(cc)
	}

	return cc
}
