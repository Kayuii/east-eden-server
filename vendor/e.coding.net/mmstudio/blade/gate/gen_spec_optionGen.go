// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package gate

import (
	"encoding/binary"
	"errors"
	"io"
	"time"

	"e.coding.net/mmstudio/blade/gate/selector"
	"e.coding.net/mmstudio/blade/golib/encoding2"
	"e.coding.net/mmstudio/blade/golib/encoding2/protobuf"
	"e.coding.net/mmstudio/blade/golib/net/link"
)

type Spec struct {
	ConnReadTimeout         time.Duration
	ConnWriteTimeout        time.Duration
	DispatcherDialTimeout   time.Duration
	StableConnection        bool
	PortForClient           int
	PortForClientReuse      bool
	EnableWebSocket         bool
	PortForWebClient        int
	PathForWebClient        string
	EnableZeroCopy          bool
	EnableXListener         bool
	XListenerBacklogAccept  int
	XListenerTimeoutCanRead time.Duration
	XListenerHandshake      bool
	OnFrameForLog           func([]byte, string)
	ByteOrderForLog         binary.ByteOrder
	Selector                selector.Selector
	BackEndHandshake        bool
	TransferProvider        func(io.ReadWriter) (link.Transporter, error)
	MessageCodec            encoding2.Codec
	PatchPath               string
	SelectorStrategy        selector.Strategy
	Filter                  []FilterPlugin
	HandshakeSecret         bool
	HandshakeCheckTime      bool
	SecretKey               string
}

func (cc *Spec) SetOption(opt SpecOption) {
	_ = opt(cc)
}

func (cc *Spec) ApplyOption(opts ...SpecOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *Spec) GetSetOption(opt SpecOption) SpecOption {
	return opt(cc)
}

type SpecOption func(cc *Spec) SpecOption

func WithConnReadTimeout(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.ConnReadTimeout
		cc.ConnReadTimeout = v
		return WithConnReadTimeout(previous)
	}
}
func WithConnWriteTimeout(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.ConnWriteTimeout
		cc.ConnWriteTimeout = v
		return WithConnWriteTimeout(previous)
	}
}
func WithDispatcherDialTimeout(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.DispatcherDialTimeout
		cc.DispatcherDialTimeout = v
		return WithDispatcherDialTimeout(previous)
	}
}
func WithStableConnection(v bool) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.StableConnection
		cc.StableConnection = v
		return WithStableConnection(previous)
	}
}
func WithPortForClient(v int) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.PortForClient
		cc.PortForClient = v
		return WithPortForClient(previous)
	}
}
func WithPortForClientReuse(v bool) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.PortForClientReuse
		cc.PortForClientReuse = v
		return WithPortForClientReuse(previous)
	}
}
func WithEnableWebSocket(v bool) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.EnableWebSocket
		cc.EnableWebSocket = v
		return WithEnableWebSocket(previous)
	}
}
func WithPortForWebClient(v int) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.PortForWebClient
		cc.PortForWebClient = v
		return WithPortForWebClient(previous)
	}
}
func WithPathForWebClient(v string) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.PathForWebClient
		cc.PathForWebClient = v
		return WithPathForWebClient(previous)
	}
}
func WithEnableZeroCopy(v bool) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.EnableZeroCopy
		cc.EnableZeroCopy = v
		return WithEnableZeroCopy(previous)
	}
}
func WithEnableXListener(v bool) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.EnableXListener
		cc.EnableXListener = v
		return WithEnableXListener(previous)
	}
}
func WithXListenerBacklogAccept(v int) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.XListenerBacklogAccept
		cc.XListenerBacklogAccept = v
		return WithXListenerBacklogAccept(previous)
	}
}
func WithXListenerTimeoutCanRead(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.XListenerTimeoutCanRead
		cc.XListenerTimeoutCanRead = v
		return WithXListenerTimeoutCanRead(previous)
	}
}
func WithXListenerHandshake(v bool) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.XListenerHandshake
		cc.XListenerHandshake = v
		return WithXListenerHandshake(previous)
	}
}
func WithOnFrameForLog(v func([]byte, string)) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.OnFrameForLog
		cc.OnFrameForLog = v
		return WithOnFrameForLog(previous)
	}
}
func WithByteOrderForLog(v binary.ByteOrder) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.ByteOrderForLog
		cc.ByteOrderForLog = v
		return WithByteOrderForLog(previous)
	}
}
func WithSelector(v selector.Selector) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.Selector
		cc.Selector = v
		return WithSelector(previous)
	}
}
func WithBackEndHandshake(v bool) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.BackEndHandshake
		cc.BackEndHandshake = v
		return WithBackEndHandshake(previous)
	}
}
func WithTransferProvider(v func(io.ReadWriter) (link.Transporter, error)) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.TransferProvider
		cc.TransferProvider = v
		return WithTransferProvider(previous)
	}
}
func WithMessageCodec(v encoding2.Codec) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.MessageCodec
		cc.MessageCodec = v
		return WithMessageCodec(previous)
	}
}
func WithPatchPath(v string) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.PatchPath
		cc.PatchPath = v
		return WithPatchPath(previous)
	}
}
func WithSelectorStrategy(v selector.Strategy) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.SelectorStrategy
		cc.SelectorStrategy = v
		return WithSelectorStrategy(previous)
	}
}
func WithFilter(v ...FilterPlugin) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.Filter
		cc.Filter = v
		return WithFilter(previous...)
	}
}
func WithHandshakeSecret(v bool) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.HandshakeSecret
		cc.HandshakeSecret = v
		return WithHandshakeSecret(previous)
	}
}
func WithHandshakeCheckTime(v bool) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.HandshakeCheckTime
		cc.HandshakeCheckTime = v
		return WithHandshakeCheckTime(previous)
	}
}
func WithSecretKey(v string) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.SecretKey
		cc.SecretKey = v
		return WithSecretKey(previous)
	}
}

func NewSpec(opts ...SpecOption) *Spec {
	cc := newDefaultSpec()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogSpec != nil {
		watchDogSpec(cc)
	}
	return cc
}

func InstallSpecWatchDog(dog func(cc *Spec)) {
	watchDogSpec = dog
}

var watchDogSpec func(cc *Spec)

func newDefaultSpec() *Spec {

	cc := &Spec{}

	for _, opt := range [...]SpecOption{
		WithConnReadTimeout(time.Duration(30) * time.Second),
		WithConnWriteTimeout(time.Duration(30) * time.Second),
		WithDispatcherDialTimeout(time.Duration(30) * time.Second),
		WithStableConnection(false),
		WithPortForClient(8989),
		WithPortForClientReuse(true),
		WithEnableWebSocket(false),
		WithPortForWebClient(8990),
		WithPathForWebClient("/gate"),
		WithEnableZeroCopy(true),
		WithEnableXListener(true),
		WithXListenerBacklogAccept(10240),
		WithXListenerTimeoutCanRead(time.Duration(30) * time.Second),
		WithXListenerHandshake(false),
		WithOnFrameForLog(func([]byte, string) {
		}),
		WithByteOrderForLog(binary.LittleEndian),
		WithSelector(nil),
		WithBackEndHandshake(false),
		WithTransferProvider(func(_ io.ReadWriter) (link.Transporter, error) {
			return nil, errors.New("no transfer")
		}),
		WithMessageCodec(protobuf.Codec),
		WithPatchPath("./patch"),
		WithSelectorStrategy(selector.RoundRobin),
		WithFilter(nil...),
		WithHandshakeSecret(false),
		WithHandshakeCheckTime(false),
		WithSecretKey(DefaultSecret),
	} {
		_ = opt(cc)
	}

	return cc
}
