// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package kvs

import (
	"context"
	"time"
)

type GetOptions struct {
	Context       context.Context
	KVReadOptions *ReadOptions
}

func (cc *GetOptions) SetOption(opt GetOption) {
	_ = opt(cc)
}

func (cc *GetOptions) ApplyOption(opts ...GetOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *GetOptions) GetSetOption(opt GetOption) GetOption {
	return opt(cc)
}

type GetOption func(cc *GetOptions) GetOption

func WithGetOptionContext(v context.Context) GetOption {
	return func(cc *GetOptions) GetOption {
		previous := cc.Context
		cc.Context = v
		return WithGetOptionContext(previous)
	}
}
func WithGetOptionKVReadOptions(v *ReadOptions) GetOption {
	return func(cc *GetOptions) GetOption {
		previous := cc.KVReadOptions
		cc.KVReadOptions = v
		return WithGetOptionKVReadOptions(previous)
	}
}

func NewGetOptions(opts ...GetOption) *GetOptions {
	cc := newDefaultGetOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogGetOptions != nil {
		watchDogGetOptions(cc)
	}
	return cc
}

func InstallGetOptionsWatchDog(dog func(cc *GetOptions)) {
	watchDogGetOptions = dog
}

var watchDogGetOptions func(cc *GetOptions)

func newDefaultGetOptions() *GetOptions {

	cc := &GetOptions{}

	for _, opt := range [...]GetOption{
		WithGetOptionContext(nil),
		WithGetOptionKVReadOptions(nil),
	} {
		_ = opt(cc)
	}

	return cc
}

type LockOptions struct {
	Value          []byte
	TTL            time.Duration
	RenewLock      chan struct{}
	DeleteOnUnlock bool
}

func (cc *LockOptions) SetOption(opt LockOption) {
	_ = opt(cc)
}

func (cc *LockOptions) ApplyOption(opts ...LockOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *LockOptions) GetSetOption(opt LockOption) LockOption {
	return opt(cc)
}

type LockOption func(cc *LockOptions) LockOption

func WithLockOptionValue(v []byte) LockOption {
	return func(cc *LockOptions) LockOption {
		previous := cc.Value
		cc.Value = v
		return WithLockOptionValue(previous)
	}
}
func WithLockOptionTTL(v time.Duration) LockOption {
	return func(cc *LockOptions) LockOption {
		previous := cc.TTL
		cc.TTL = v
		return WithLockOptionTTL(previous)
	}
}
func WithLockOptionRenewLock(v chan struct{}) LockOption {
	return func(cc *LockOptions) LockOption {
		previous := cc.RenewLock
		cc.RenewLock = v
		return WithLockOptionRenewLock(previous)
	}
}
func WithLockOptionDeleteOnUnlock(v bool) LockOption {
	return func(cc *LockOptions) LockOption {
		previous := cc.DeleteOnUnlock
		cc.DeleteOnUnlock = v
		return WithLockOptionDeleteOnUnlock(previous)
	}
}

func NewLockOptions(opts ...LockOption) *LockOptions {
	cc := newDefaultLockOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogLockOptions != nil {
		watchDogLockOptions(cc)
	}
	return cc
}

func InstallLockOptionsWatchDog(dog func(cc *LockOptions)) {
	watchDogLockOptions = dog
}

var watchDogLockOptions func(cc *LockOptions)

func newDefaultLockOptions() *LockOptions {

	cc := &LockOptions{}

	for _, opt := range [...]LockOption{
		WithLockOptionValue(nil),
		WithLockOptionTTL(0),
		WithLockOptionRenewLock(nil),
		WithLockOptionDeleteOnUnlock(false),
	} {
		_ = opt(cc)
	}

	return cc
}

type ReadOptions struct {
	Consistent bool
}

func (cc *ReadOptions) SetOption(opt ReadOption) {
	_ = opt(cc)
}

func (cc *ReadOptions) ApplyOption(opts ...ReadOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *ReadOptions) GetSetOption(opt ReadOption) ReadOption {
	return opt(cc)
}

type ReadOption func(cc *ReadOptions) ReadOption

func WithReadOptionConsistent(v bool) ReadOption {
	return func(cc *ReadOptions) ReadOption {
		previous := cc.Consistent
		cc.Consistent = v
		return WithReadOptionConsistent(previous)
	}
}

func NewReadOptions(opts ...ReadOption) *ReadOptions {
	cc := newDefaultReadOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogReadOptions != nil {
		watchDogReadOptions(cc)
	}
	return cc
}

func InstallReadOptionsWatchDog(dog func(cc *ReadOptions)) {
	watchDogReadOptions = dog
}

var watchDogReadOptions func(cc *ReadOptions)

func newDefaultReadOptions() *ReadOptions {

	cc := &ReadOptions{}

	for _, opt := range [...]ReadOption{
		WithReadOptionConsistent(false),
	} {
		_ = opt(cc)
	}

	return cc
}

type RegistryOptions struct {
	TTL                        time.Duration
	KeepAlive                  bool
	UsingConsistentRead        bool
	BaseStoreWriteOptionsInner *WriteOptions
	BaseStoreReadOptionsInner  *ReadOptions
}

func (cc *RegistryOptions) SetOption(opt RegistryOption) {
	_ = opt(cc)
}

func (cc *RegistryOptions) ApplyOption(opts ...RegistryOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *RegistryOptions) GetSetOption(opt RegistryOption) RegistryOption {
	return opt(cc)
}

type RegistryOption func(cc *RegistryOptions) RegistryOption

func WithRegistryOptionTTL(v time.Duration) RegistryOption {
	return func(cc *RegistryOptions) RegistryOption {
		previous := cc.TTL
		cc.TTL = v
		return WithRegistryOptionTTL(previous)
	}
}
func WithRegistryOptionKeepAlive(v bool) RegistryOption {
	return func(cc *RegistryOptions) RegistryOption {
		previous := cc.KeepAlive
		cc.KeepAlive = v
		return WithRegistryOptionKeepAlive(previous)
	}
}
func WithRegistryOptionUsingConsistentRead(v bool) RegistryOption {
	return func(cc *RegistryOptions) RegistryOption {
		previous := cc.UsingConsistentRead
		cc.UsingConsistentRead = v
		return WithRegistryOptionUsingConsistentRead(previous)
	}
}

func NewRegistryOptions(opts ...RegistryOption) *RegistryOptions {
	cc := newDefaultRegistryOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogRegistryOptions != nil {
		watchDogRegistryOptions(cc)
	}
	return cc
}

func InstallRegistryOptionsWatchDog(dog func(cc *RegistryOptions)) {
	watchDogRegistryOptions = dog
}

var watchDogRegistryOptions func(cc *RegistryOptions)

func newDefaultRegistryOptions() *RegistryOptions {

	cc := &RegistryOptions{
		BaseStoreWriteOptionsInner: nil,
		BaseStoreReadOptionsInner:  nil,
	}

	for _, opt := range [...]RegistryOption{
		WithRegistryOptionTTL(time.Duration(30) * time.Second),
		WithRegistryOptionKeepAlive(true),
		WithRegistryOptionUsingConsistentRead(false),
	} {
		_ = opt(cc)
	}

	return cc
}

type StoreOptions struct {
	Endpoints         []string
	Name              string
	ConnectionTimeout time.Duration
	OperationTimeout  time.Duration
	AutoSyncInterval  time.Duration
	Username          string
	Password          string
	ETCDV3Config      interface{}
}

func (cc *StoreOptions) SetOption(opt StoreOption) {
	_ = opt(cc)
}

func (cc *StoreOptions) ApplyOption(opts ...StoreOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *StoreOptions) GetSetOption(opt StoreOption) StoreOption {
	return opt(cc)
}

type StoreOption func(cc *StoreOptions) StoreOption

func WithStoreOptionEndpoints(v ...string) StoreOption {
	return func(cc *StoreOptions) StoreOption {
		previous := cc.Endpoints
		cc.Endpoints = v
		return WithStoreOptionEndpoints(previous...)
	}
}
func WithStoreOptionName(v string) StoreOption {
	return func(cc *StoreOptions) StoreOption {
		previous := cc.Name
		cc.Name = v
		return WithStoreOptionName(previous)
	}
}
func WithStoreOptionConnectionTimeout(v time.Duration) StoreOption {
	return func(cc *StoreOptions) StoreOption {
		previous := cc.ConnectionTimeout
		cc.ConnectionTimeout = v
		return WithStoreOptionConnectionTimeout(previous)
	}
}
func WithStoreOptionOperationTimeout(v time.Duration) StoreOption {
	return func(cc *StoreOptions) StoreOption {
		previous := cc.OperationTimeout
		cc.OperationTimeout = v
		return WithStoreOptionOperationTimeout(previous)
	}
}
func WithStoreOptionAutoSyncInterval(v time.Duration) StoreOption {
	return func(cc *StoreOptions) StoreOption {
		previous := cc.AutoSyncInterval
		cc.AutoSyncInterval = v
		return WithStoreOptionAutoSyncInterval(previous)
	}
}
func WithStoreOptionUsername(v string) StoreOption {
	return func(cc *StoreOptions) StoreOption {
		previous := cc.Username
		cc.Username = v
		return WithStoreOptionUsername(previous)
	}
}
func WithStoreOptionPassword(v string) StoreOption {
	return func(cc *StoreOptions) StoreOption {
		previous := cc.Password
		cc.Password = v
		return WithStoreOptionPassword(previous)
	}
}
func WithStoreOptionETCDV3Config(v interface{}) StoreOption {
	return func(cc *StoreOptions) StoreOption {
		previous := cc.ETCDV3Config
		cc.ETCDV3Config = v
		return WithStoreOptionETCDV3Config(previous)
	}
}

func NewStoreOptions(opts ...StoreOption) *StoreOptions {
	cc := newDefaultStoreOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogStoreOptions != nil {
		watchDogStoreOptions(cc)
	}
	return cc
}

func InstallStoreOptionsWatchDog(dog func(cc *StoreOptions)) {
	watchDogStoreOptions = dog
}

var watchDogStoreOptions func(cc *StoreOptions)

func newDefaultStoreOptions() *StoreOptions {

	cc := &StoreOptions{}

	for _, opt := range [...]StoreOption{
		WithStoreOptionEndpoints(nil...),
		WithStoreOptionName(""),
		WithStoreOptionConnectionTimeout(time.Duration(20) * time.Second),
		WithStoreOptionOperationTimeout(defaultOperationTimeout),
		WithStoreOptionAutoSyncInterval(defaultAutoSyncInterval),
		WithStoreOptionUsername(""),
		WithStoreOptionPassword(""),
		WithStoreOptionETCDV3Config(nil),
	} {
		_ = opt(cc)
	}

	return cc
}

type WatchOptions struct {
	Context       context.Context
	Heartbeat     time.Duration
	KVReadOptions *ReadOptions
}

func (cc *WatchOptions) SetOption(opt WatchOption) {
	_ = opt(cc)
}

func (cc *WatchOptions) ApplyOption(opts ...WatchOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *WatchOptions) GetSetOption(opt WatchOption) WatchOption {
	return opt(cc)
}

type WatchOption func(cc *WatchOptions) WatchOption

func WithWatchOptionContext(v context.Context) WatchOption {
	return func(cc *WatchOptions) WatchOption {
		previous := cc.Context
		cc.Context = v
		return WithWatchOptionContext(previous)
	}
}
func WithWatchOptionHeartbeat(v time.Duration) WatchOption {
	return func(cc *WatchOptions) WatchOption {
		previous := cc.Heartbeat
		cc.Heartbeat = v
		return WithWatchOptionHeartbeat(previous)
	}
}
func WithWatchOptionKVReadOptions(v *ReadOptions) WatchOption {
	return func(cc *WatchOptions) WatchOption {
		previous := cc.KVReadOptions
		cc.KVReadOptions = v
		return WithWatchOptionKVReadOptions(previous)
	}
}

func NewWatchOptions(opts ...WatchOption) *WatchOptions {
	cc := newDefaultWatchOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogWatchOptions != nil {
		watchDogWatchOptions(cc)
	}
	return cc
}

func InstallWatchOptionsWatchDog(dog func(cc *WatchOptions)) {
	watchDogWatchOptions = dog
}

var watchDogWatchOptions func(cc *WatchOptions)

func newDefaultWatchOptions() *WatchOptions {

	cc := &WatchOptions{}

	for _, opt := range [...]WatchOption{
		WithWatchOptionContext(nil),
		WithWatchOptionHeartbeat(time.Duration(10) * time.Second),
		WithWatchOptionKVReadOptions(nil),
	} {
		_ = opt(cc)
	}

	return cc
}

type WriteOptions struct {
	TTL                     time.Duration
	KeepAlive               bool
	KeepAliveLostChanSetter func(chan struct{})
}

func (cc *WriteOptions) SetOption(opt WriteOption) {
	_ = opt(cc)
}

func (cc *WriteOptions) ApplyOption(opts ...WriteOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *WriteOptions) GetSetOption(opt WriteOption) WriteOption {
	return opt(cc)
}

type WriteOption func(cc *WriteOptions) WriteOption

func WithWriteOptionTTL(v time.Duration) WriteOption {
	return func(cc *WriteOptions) WriteOption {
		previous := cc.TTL
		cc.TTL = v
		return WithWriteOptionTTL(previous)
	}
}
func WithWriteOptionKeepAlive(v bool) WriteOption {
	return func(cc *WriteOptions) WriteOption {
		previous := cc.KeepAlive
		cc.KeepAlive = v
		return WithWriteOptionKeepAlive(previous)
	}
}
func WithWriteOptionKeepAliveLostChanSetter(v func(chan struct{})) WriteOption {
	return func(cc *WriteOptions) WriteOption {
		previous := cc.KeepAliveLostChanSetter
		cc.KeepAliveLostChanSetter = v
		return WithWriteOptionKeepAliveLostChanSetter(previous)
	}
}

func NewWriteOptions(opts ...WriteOption) *WriteOptions {
	cc := newDefaultWriteOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogWriteOptions != nil {
		watchDogWriteOptions(cc)
	}
	return cc
}

func InstallWriteOptionsWatchDog(dog func(cc *WriteOptions)) {
	watchDogWriteOptions = dog
}

var watchDogWriteOptions func(cc *WriteOptions)

func newDefaultWriteOptions() *WriteOptions {

	cc := &WriteOptions{}

	for _, opt := range [...]WriteOption{
		WithWriteOptionTTL(0),
		WithWriteOptionKeepAlive(true),
		WithWriteOptionKeepAliveLostChanSetter(nil),
	} {
		_ = opt(cc)
	}

	return cc
}
