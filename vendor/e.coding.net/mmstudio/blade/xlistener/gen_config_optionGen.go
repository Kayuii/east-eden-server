// Code generated by optionGen. DO NOT EDIT.
// optionGen: github.com/timestee/optionGen

package xlistener

import "fmt"
import "os"
import "time"

type Conf struct {
	BacklogAccept    int
	TimeoutCanRead   time.Duration
	EnableHandshake  bool
	HandshakeTimeout time.Duration
	Debugf           func(format string, v ...interface{})
	Warningf         func(format string, v ...interface{})
}

func (cc *Conf) SetOption(opt ConfOption) {
	_ = opt(cc)
}

func (cc *Conf) GetSetOption(opt ConfOption) ConfOption {
	return opt(cc)
}

type ConfOption func(cc *Conf) ConfOption

func WithBacklogAccept(v int) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.BacklogAccept
		cc.BacklogAccept = v
		return WithBacklogAccept(previous)
	}
}
func WithTimeoutCanRead(v time.Duration) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.TimeoutCanRead
		cc.TimeoutCanRead = v
		return WithTimeoutCanRead(previous)
	}
}
func WithEnableHandshake(v bool) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.EnableHandshake
		cc.EnableHandshake = v
		return WithEnableHandshake(previous)
	}
}
func WithHandshakeTimeout(v time.Duration) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.HandshakeTimeout
		cc.HandshakeTimeout = v
		return WithHandshakeTimeout(previous)
	}
}
func WithDebugf(v func(format string, v ...interface{})) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.Debugf
		cc.Debugf = v
		return WithDebugf(previous)
	}
}
func WithWarningf(v func(format string, v ...interface{})) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.Warningf
		cc.Warningf = v
		return WithWarningf(previous)
	}
}

func NewConf(opts ...ConfOption) *Conf {
	cc := newDefaultConf()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogConf != nil {
		watchDogConf(cc)
	}
	return cc
}

func InstallConfWatchDog(dog func(cc *Conf)) {
	watchDogConf = dog
}

var watchDogConf func(cc *Conf)

var defaultConfOptions = [...]ConfOption{
	WithBacklogAccept(1024),
	WithTimeoutCanRead(time.Second * time.Duration(30)),
	WithEnableHandshake(false),
	WithHandshakeTimeout(time.Second * time.Duration(10)),
	WithDebugf(func(format string, v ...interface{}) {
		_, _ = fmt.Fprintf(os.Stdout, format, v...)
	}),
	WithWarningf(func(format string, v ...interface{}) {
		_, _ = fmt.Fprintf(os.Stderr, format, v...)
	}),
}

func newDefaultConf() *Conf {
	cc := &Conf{}

	for _, opt := range defaultConfOptions {
		_ = opt(cc)
	}

	return cc
}
