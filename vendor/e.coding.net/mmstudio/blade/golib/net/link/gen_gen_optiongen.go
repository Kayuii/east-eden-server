// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package link

import (
	"encoding/binary"
	"time"

	"e.coding.net/mmstudio/blade/golib/time2"
)

type ProtocolOptions struct {
	BytesPool                       BytesPool
	MaxRecv                         int
	MaxSend                         int
	ByteOrder                       binary.ByteOrder
	RetryCountWhenTempError         int
	RecvBufferWait                  time.Duration
	WriteBufferWait                 time.Duration
	ReadRetryIntervalWhenTempError  time.Duration
	WriteRetryIntervalWhenTempError time.Duration
}

func (cc *ProtocolOptions) SetOption(opt ProtocolOption) {
	_ = opt(cc)
}

func (cc *ProtocolOptions) ApplyOption(opts ...ProtocolOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *ProtocolOptions) GetSetOption(opt ProtocolOption) ProtocolOption {
	return opt(cc)
}

type ProtocolOption func(cc *ProtocolOptions) ProtocolOption

func WithProtocolOptionBytesPool(v BytesPool) ProtocolOption {
	return func(cc *ProtocolOptions) ProtocolOption {
		previous := cc.BytesPool
		cc.BytesPool = v
		return WithProtocolOptionBytesPool(previous)
	}
}
func WithProtocolOptionMaxRecv(v int) ProtocolOption {
	return func(cc *ProtocolOptions) ProtocolOption {
		previous := cc.MaxRecv
		cc.MaxRecv = v
		return WithProtocolOptionMaxRecv(previous)
	}
}
func WithProtocolOptionMaxSend(v int) ProtocolOption {
	return func(cc *ProtocolOptions) ProtocolOption {
		previous := cc.MaxSend
		cc.MaxSend = v
		return WithProtocolOptionMaxSend(previous)
	}
}
func WithProtocolOptionByteOrder(v binary.ByteOrder) ProtocolOption {
	return func(cc *ProtocolOptions) ProtocolOption {
		previous := cc.ByteOrder
		cc.ByteOrder = v
		return WithProtocolOptionByteOrder(previous)
	}
}
func WithProtocolOptionRetryCountWhenTempError(v int) ProtocolOption {
	return func(cc *ProtocolOptions) ProtocolOption {
		previous := cc.RetryCountWhenTempError
		cc.RetryCountWhenTempError = v
		return WithProtocolOptionRetryCountWhenTempError(previous)
	}
}
func WithProtocolOptionRecvBufferWait(v time.Duration) ProtocolOption {
	return func(cc *ProtocolOptions) ProtocolOption {
		previous := cc.RecvBufferWait
		cc.RecvBufferWait = v
		return WithProtocolOptionRecvBufferWait(previous)
	}
}
func WithProtocolOptionWriteBufferWait(v time.Duration) ProtocolOption {
	return func(cc *ProtocolOptions) ProtocolOption {
		previous := cc.WriteBufferWait
		cc.WriteBufferWait = v
		return WithProtocolOptionWriteBufferWait(previous)
	}
}
func WithProtocolOptionReadRetryIntervalWhenTempError(v time.Duration) ProtocolOption {
	return func(cc *ProtocolOptions) ProtocolOption {
		previous := cc.ReadRetryIntervalWhenTempError
		cc.ReadRetryIntervalWhenTempError = v
		return WithProtocolOptionReadRetryIntervalWhenTempError(previous)
	}
}
func WithProtocolOptionWriteRetryIntervalWhenTempError(v time.Duration) ProtocolOption {
	return func(cc *ProtocolOptions) ProtocolOption {
		previous := cc.WriteRetryIntervalWhenTempError
		cc.WriteRetryIntervalWhenTempError = v
		return WithProtocolOptionWriteRetryIntervalWhenTempError(previous)
	}
}

func NewProtocolOptions(opts ...ProtocolOption) *ProtocolOptions {
	cc := newDefaultProtocolOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogProtocolOptions != nil {
		watchDogProtocolOptions(cc)
	}
	return cc
}

func InstallProtocolOptionsWatchDog(dog func(cc *ProtocolOptions)) {
	watchDogProtocolOptions = dog
}

var watchDogProtocolOptions func(cc *ProtocolOptions)

func newDefaultProtocolOptions() *ProtocolOptions {

	cc := &ProtocolOptions{}

	for _, opt := range [...]ProtocolOption{
		WithProtocolOptionBytesPool(nil),
		WithProtocolOptionMaxRecv(maxRecv),
		WithProtocolOptionMaxSend(maxSend),
		WithProtocolOptionByteOrder(binary.LittleEndian),
		WithProtocolOptionRetryCountWhenTempError(3),
		WithProtocolOptionRecvBufferWait(DefaultRecvBufferWait),
		WithProtocolOptionWriteBufferWait(DefaultWriteBufferWait),
		WithProtocolOptionReadRetryIntervalWhenTempError(DefaultRetryInterval),
		WithProtocolOptionWriteRetryIntervalWhenTempError(DefaultRetryInterval),
	} {
		_ = opt(cc)
	}

	return cc
}

type Spec struct {
	Proto                    string
	Address                  string
	TCPReadBuffer            int
	TCPWriteBuffer           int
	TCPNoDelay               bool
	TCPLingerSecond          int
	AcceptTimeout            time.Duration
	ReadTimeout              time.Duration
	WriteTimeout             time.Duration
	IdleTimeout              time.Duration
	KeepAlivePeriod          time.Duration
	SendChanSize             int
	InvokerPerSession        int
	QueuePerInvoker          int
	FlushTimeout             time.Duration
	timingWheelForFlushInner *time2.TimingWheel
	WebSocketPattern         string
	TLSCertFile              string
	TLSKeyFile               string
}

func (cc *Spec) SetOption(opt SpecOption) {
	_ = opt(cc)
}

func (cc *Spec) ApplyOption(opts ...SpecOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *Spec) GetSetOption(opt SpecOption) SpecOption {
	return opt(cc)
}

type SpecOption func(cc *Spec) SpecOption

func WithSpecProto(v string) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.Proto
		cc.Proto = v
		return WithSpecProto(previous)
	}
}
func WithSpecAddress(v string) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.Address
		cc.Address = v
		return WithSpecAddress(previous)
	}
}
func WithSpecTCPReadBuffer(v int) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.TCPReadBuffer
		cc.TCPReadBuffer = v
		return WithSpecTCPReadBuffer(previous)
	}
}
func WithSpecTCPWriteBuffer(v int) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.TCPWriteBuffer
		cc.TCPWriteBuffer = v
		return WithSpecTCPWriteBuffer(previous)
	}
}
func WithSpecTCPNoDelay(v bool) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.TCPNoDelay
		cc.TCPNoDelay = v
		return WithSpecTCPNoDelay(previous)
	}
}
func WithSpecTCPLingerSecond(v int) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.TCPLingerSecond
		cc.TCPLingerSecond = v
		return WithSpecTCPLingerSecond(previous)
	}
}
func WithSpecAcceptTimeout(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.AcceptTimeout
		cc.AcceptTimeout = v
		return WithSpecAcceptTimeout(previous)
	}
}
func WithSpecReadTimeout(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.ReadTimeout
		cc.ReadTimeout = v
		return WithSpecReadTimeout(previous)
	}
}
func WithSpecWriteTimeout(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.WriteTimeout
		cc.WriteTimeout = v
		return WithSpecWriteTimeout(previous)
	}
}
func WithSpecIdleTimeout(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.IdleTimeout
		cc.IdleTimeout = v
		return WithSpecIdleTimeout(previous)
	}
}
func WithSpecKeepAlivePeriod(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.KeepAlivePeriod
		cc.KeepAlivePeriod = v
		return WithSpecKeepAlivePeriod(previous)
	}
}
func WithSpecSendChanSize(v int) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.SendChanSize
		cc.SendChanSize = v
		return WithSpecSendChanSize(previous)
	}
}
func WithSpecInvokerPerSession(v int) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.InvokerPerSession
		cc.InvokerPerSession = v
		return WithSpecInvokerPerSession(previous)
	}
}
func WithSpecQueuePerInvoker(v int) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.QueuePerInvoker
		cc.QueuePerInvoker = v
		return WithSpecQueuePerInvoker(previous)
	}
}
func WithSpecFlushTimeout(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.FlushTimeout
		cc.FlushTimeout = v
		return WithSpecFlushTimeout(previous)
	}
}
func WithSpecWebSocketPattern(v string) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.WebSocketPattern
		cc.WebSocketPattern = v
		return WithSpecWebSocketPattern(previous)
	}
}
func WithSpecTLSCertFile(v string) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.TLSCertFile
		cc.TLSCertFile = v
		return WithSpecTLSCertFile(previous)
	}
}
func WithSpecTLSKeyFile(v string) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.TLSKeyFile
		cc.TLSKeyFile = v
		return WithSpecTLSKeyFile(previous)
	}
}

func NewSpec(opts ...SpecOption) *Spec {
	cc := newDefaultSpec()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogSpec != nil {
		watchDogSpec(cc)
	}
	return cc
}

func InstallSpecWatchDog(dog func(cc *Spec)) {
	watchDogSpec = dog
}

var watchDogSpec func(cc *Spec)

func newDefaultSpec() *Spec {

	cc := &Spec{
		timingWheelForFlushInner: nil,
	}

	for _, opt := range [...]SpecOption{
		WithSpecProto("tcp"),
		WithSpecAddress(""),
		WithSpecTCPReadBuffer(tcpReadBuffer),
		WithSpecTCPWriteBuffer(tcpWriteBuffer),
		WithSpecTCPNoDelay(true),
		WithSpecTCPLingerSecond(0),
		WithSpecAcceptTimeout(500 * time.Millisecond),
		WithSpecReadTimeout(0 * time.Millisecond),
		WithSpecWriteTimeout(0 * time.Millisecond),
		WithSpecIdleTimeout(600000 * time.Millisecond),
		WithSpecKeepAlivePeriod(0 * time.Millisecond),
		WithSpecSendChanSize(16),
		WithSpecInvokerPerSession(-1),
		WithSpecQueuePerInvoker(5000),
		WithSpecFlushTimeout(time.Second * 5),
		WithSpecWebSocketPattern("/ws"),
		WithSpecTLSCertFile(""),
		WithSpecTLSKeyFile(""),
	} {
		_ = opt(cc)
	}

	return cc
}

type WsProtocolOptions struct {
	RetryCountWhenTempError         int
	RecvBufferWait                  time.Duration
	WriteBufferWait                 time.Duration
	ReadRetryIntervalWhenTempError  time.Duration
	WriteRetryIntervalWhenTempError time.Duration
}

func (cc *WsProtocolOptions) SetOption(opt WsProtocolOption) {
	_ = opt(cc)
}

func (cc *WsProtocolOptions) ApplyOption(opts ...WsProtocolOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *WsProtocolOptions) GetSetOption(opt WsProtocolOption) WsProtocolOption {
	return opt(cc)
}

type WsProtocolOption func(cc *WsProtocolOptions) WsProtocolOption

func WithWsProtocolOptionRetryCountWhenTempError(v int) WsProtocolOption {
	return func(cc *WsProtocolOptions) WsProtocolOption {
		previous := cc.RetryCountWhenTempError
		cc.RetryCountWhenTempError = v
		return WithWsProtocolOptionRetryCountWhenTempError(previous)
	}
}
func WithWsProtocolOptionRecvBufferWait(v time.Duration) WsProtocolOption {
	return func(cc *WsProtocolOptions) WsProtocolOption {
		previous := cc.RecvBufferWait
		cc.RecvBufferWait = v
		return WithWsProtocolOptionRecvBufferWait(previous)
	}
}
func WithWsProtocolOptionWriteBufferWait(v time.Duration) WsProtocolOption {
	return func(cc *WsProtocolOptions) WsProtocolOption {
		previous := cc.WriteBufferWait
		cc.WriteBufferWait = v
		return WithWsProtocolOptionWriteBufferWait(previous)
	}
}
func WithWsProtocolOptionReadRetryIntervalWhenTempError(v time.Duration) WsProtocolOption {
	return func(cc *WsProtocolOptions) WsProtocolOption {
		previous := cc.ReadRetryIntervalWhenTempError
		cc.ReadRetryIntervalWhenTempError = v
		return WithWsProtocolOptionReadRetryIntervalWhenTempError(previous)
	}
}
func WithWsProtocolOptionWriteRetryIntervalWhenTempError(v time.Duration) WsProtocolOption {
	return func(cc *WsProtocolOptions) WsProtocolOption {
		previous := cc.WriteRetryIntervalWhenTempError
		cc.WriteRetryIntervalWhenTempError = v
		return WithWsProtocolOptionWriteRetryIntervalWhenTempError(previous)
	}
}

func NewWsProtocolOptions(opts ...WsProtocolOption) *WsProtocolOptions {
	cc := newDefaultWsProtocolOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogWsProtocolOptions != nil {
		watchDogWsProtocolOptions(cc)
	}
	return cc
}

func InstallWsProtocolOptionsWatchDog(dog func(cc *WsProtocolOptions)) {
	watchDogWsProtocolOptions = dog
}

var watchDogWsProtocolOptions func(cc *WsProtocolOptions)

func newDefaultWsProtocolOptions() *WsProtocolOptions {

	cc := &WsProtocolOptions{}

	for _, opt := range [...]WsProtocolOption{
		WithWsProtocolOptionRetryCountWhenTempError(3),
		WithWsProtocolOptionRecvBufferWait(DefaultRecvBufferWait),
		WithWsProtocolOptionWriteBufferWait(DefaultWriteBufferWait),
		WithWsProtocolOptionReadRetryIntervalWhenTempError(DefaultRetryInterval),
		WithWsProtocolOptionWriteRetryIntervalWhenTempError(DefaultRetryInterval),
	} {
		_ = opt(cc)
	}

	return cc
}
