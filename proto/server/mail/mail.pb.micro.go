// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: server/mail/mail.proto

package mail

import (
	_ "e.coding.net/mmstudio/blade/server/proto/global"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MailService service

func NewMailServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MailService service

type MailService interface {
	CreateMail(ctx context.Context, in *CreateMailRq, opts ...client.CallOption) (*CreateMailRs, error)
	QueryPlayerMails(ctx context.Context, in *QueryPlayerMailsRq, opts ...client.CallOption) (*QueryPlayerMailsRs, error)
	ReadMail(ctx context.Context, in *ReadMailRq, opts ...client.CallOption) (*ReadMailRs, error)
	GainAttachments(ctx context.Context, in *GainAttachmentsRq, opts ...client.CallOption) (*GainAttachmentsRs, error)
	DelMail(ctx context.Context, in *DelMailRq, opts ...client.CallOption) (*DelMailRs, error)
	KickMailBox(ctx context.Context, in *KickMailBoxRq, opts ...client.CallOption) (*KickMailBoxRs, error)
}

type mailService struct {
	c    client.Client
	name string
}

func NewMailService(name string, c client.Client) MailService {
	return &mailService{
		c:    c,
		name: name,
	}
}

func (c *mailService) CreateMail(ctx context.Context, in *CreateMailRq, opts ...client.CallOption) (*CreateMailRs, error) {
	req := c.c.NewRequest(c.name, "MailService.CreateMail", in)
	out := new(CreateMailRs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailService) QueryPlayerMails(ctx context.Context, in *QueryPlayerMailsRq, opts ...client.CallOption) (*QueryPlayerMailsRs, error) {
	req := c.c.NewRequest(c.name, "MailService.QueryPlayerMails", in)
	out := new(QueryPlayerMailsRs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailService) ReadMail(ctx context.Context, in *ReadMailRq, opts ...client.CallOption) (*ReadMailRs, error) {
	req := c.c.NewRequest(c.name, "MailService.ReadMail", in)
	out := new(ReadMailRs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailService) GainAttachments(ctx context.Context, in *GainAttachmentsRq, opts ...client.CallOption) (*GainAttachmentsRs, error) {
	req := c.c.NewRequest(c.name, "MailService.GainAttachments", in)
	out := new(GainAttachmentsRs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailService) DelMail(ctx context.Context, in *DelMailRq, opts ...client.CallOption) (*DelMailRs, error) {
	req := c.c.NewRequest(c.name, "MailService.DelMail", in)
	out := new(DelMailRs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailService) KickMailBox(ctx context.Context, in *KickMailBoxRq, opts ...client.CallOption) (*KickMailBoxRs, error) {
	req := c.c.NewRequest(c.name, "MailService.KickMailBox", in)
	out := new(KickMailBoxRs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MailService service

type MailServiceHandler interface {
	CreateMail(context.Context, *CreateMailRq, *CreateMailRs) error
	QueryPlayerMails(context.Context, *QueryPlayerMailsRq, *QueryPlayerMailsRs) error
	ReadMail(context.Context, *ReadMailRq, *ReadMailRs) error
	GainAttachments(context.Context, *GainAttachmentsRq, *GainAttachmentsRs) error
	DelMail(context.Context, *DelMailRq, *DelMailRs) error
	KickMailBox(context.Context, *KickMailBoxRq, *KickMailBoxRs) error
}

func RegisterMailServiceHandler(s server.Server, hdlr MailServiceHandler, opts ...server.HandlerOption) error {
	type mailService interface {
		CreateMail(ctx context.Context, in *CreateMailRq, out *CreateMailRs) error
		QueryPlayerMails(ctx context.Context, in *QueryPlayerMailsRq, out *QueryPlayerMailsRs) error
		ReadMail(ctx context.Context, in *ReadMailRq, out *ReadMailRs) error
		GainAttachments(ctx context.Context, in *GainAttachmentsRq, out *GainAttachmentsRs) error
		DelMail(ctx context.Context, in *DelMailRq, out *DelMailRs) error
		KickMailBox(ctx context.Context, in *KickMailBoxRq, out *KickMailBoxRs) error
	}
	type MailService struct {
		mailService
	}
	h := &mailServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MailService{h}, opts...))
}

type mailServiceHandler struct {
	MailServiceHandler
}

func (h *mailServiceHandler) CreateMail(ctx context.Context, in *CreateMailRq, out *CreateMailRs) error {
	return h.MailServiceHandler.CreateMail(ctx, in, out)
}

func (h *mailServiceHandler) QueryPlayerMails(ctx context.Context, in *QueryPlayerMailsRq, out *QueryPlayerMailsRs) error {
	return h.MailServiceHandler.QueryPlayerMails(ctx, in, out)
}

func (h *mailServiceHandler) ReadMail(ctx context.Context, in *ReadMailRq, out *ReadMailRs) error {
	return h.MailServiceHandler.ReadMail(ctx, in, out)
}

func (h *mailServiceHandler) GainAttachments(ctx context.Context, in *GainAttachmentsRq, out *GainAttachmentsRs) error {
	return h.MailServiceHandler.GainAttachments(ctx, in, out)
}

func (h *mailServiceHandler) DelMail(ctx context.Context, in *DelMailRq, out *DelMailRs) error {
	return h.MailServiceHandler.DelMail(ctx, in, out)
}

func (h *mailServiceHandler) KickMailBox(ctx context.Context, in *KickMailBoxRq, out *KickMailBoxRs) error {
	return h.MailServiceHandler.KickMailBox(ctx, in, out)
}
