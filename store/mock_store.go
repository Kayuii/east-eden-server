// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	db "e.coding.net/mmstudio/blade/server/store/db"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddStoreInfo mocks base method.
func (m *MockStore) AddStoreInfo(tp int, tblName, keyName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStoreInfo", tp, tblName, keyName)
}

// AddStoreInfo indicates an expected call of AddStoreInfo.
func (mr *MockStoreMockRecorder) AddStoreInfo(tp, tblName, keyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStoreInfo", reflect.TypeOf((*MockStore)(nil).AddStoreInfo), tp, tblName, keyName)
}

// DeleteFields mocks base method.
func (m *MockStore) DeleteFields(ctx context.Context, storeType int, k interface{}, fields []string, immediately ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, storeType, k, fields}
	for _, a := range immediately {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFields", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFields indicates an expected call of DeleteFields.
func (mr *MockStoreMockRecorder) DeleteFields(ctx, storeType, k, fields interface{}, immediately ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, storeType, k, fields}, immediately...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFields", reflect.TypeOf((*MockStore)(nil).DeleteFields), varargs...)
}

// DeleteHashObject mocks base method.
func (m *MockStore) DeleteHashObject(storeType int, k, field interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashObject", storeType, k, field)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHashObject indicates an expected call of DeleteHashObject.
func (mr *MockStoreMockRecorder) DeleteHashObject(storeType, k, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashObject", reflect.TypeOf((*MockStore)(nil).DeleteHashObject), storeType, k, field)
}

// DeleteHashObjectFields mocks base method.
func (m *MockStore) DeleteHashObjectFields(storeType int, k, field, x interface{}, fields []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashObjectFields", storeType, k, field, x, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHashObjectFields indicates an expected call of DeleteHashObjectFields.
func (mr *MockStoreMockRecorder) DeleteHashObjectFields(storeType, k, field, x, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashObjectFields", reflect.TypeOf((*MockStore)(nil).DeleteHashObjectFields), storeType, k, field, x, fields)
}

// DeleteObjectFields mocks base method.
func (m *MockStore) DeleteObjectFields(storeType int, k, x interface{}, fields []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectFields", storeType, k, x, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectFields indicates an expected call of DeleteObjectFields.
func (mr *MockStoreMockRecorder) DeleteObjectFields(storeType, k, x, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectFields", reflect.TypeOf((*MockStore)(nil).DeleteObjectFields), storeType, k, x, fields)
}

// DeleteOne mocks base method.
func (m *MockStore) DeleteOne(ctx context.Context, storeType int, k interface{}, immediately ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, storeType, k}
	for _, a := range immediately {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockStoreMockRecorder) DeleteOne(ctx, storeType, k interface{}, immediately ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, storeType, k}, immediately...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockStore)(nil).DeleteOne), varargs...)
}

// Exit mocks base method.
func (m *MockStore) Exit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Exit")
}

// Exit indicates an expected call of Exit.
func (mr *MockStoreMockRecorder) Exit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exit", reflect.TypeOf((*MockStore)(nil).Exit))
}

// FindAll mocks base method.
func (m *MockStore) FindAll(ctx context.Context, storeType int, keyName string, keyValue interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, storeType, keyName, keyValue)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockStoreMockRecorder) FindAll(ctx, storeType, keyName, keyValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockStore)(nil).FindAll), ctx, storeType, keyName, keyValue)
}

// FindOne mocks base method.
func (m *MockStore) FindOne(ctx context.Context, storeType int, key, x interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, storeType, key, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockStoreMockRecorder) FindOne(ctx, storeType, key, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockStore)(nil).FindOne), ctx, storeType, key, x)
}

// Flush mocks base method.
func (m *MockStore) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockStoreMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockStore)(nil).Flush))
}

// GetDB mocks base method.
func (m *MockStore) GetDB() db.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(db.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockStoreMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockStore)(nil).GetDB))
}

// InitCompleted mocks base method.
func (m *MockStore) InitCompleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitCompleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// InitCompleted indicates an expected call of InitCompleted.
func (mr *MockStoreMockRecorder) InitCompleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitCompleted", reflect.TypeOf((*MockStore)(nil).InitCompleted))
}

// MigrateDbTable mocks base method.
func (m *MockStore) MigrateDbTable(tblName string, indexNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{tblName}
	for _, a := range indexNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateDbTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateDbTable indicates an expected call of MigrateDbTable.
func (mr *MockStoreMockRecorder) MigrateDbTable(tblName interface{}, indexNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tblName}, indexNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateDbTable", reflect.TypeOf((*MockStore)(nil).MigrateDbTable), varargs...)
}

// PullArray mocks base method.
func (m *MockStore) PullArray(ctx context.Context, storeType int, k interface{}, arrayName string, xKey interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullArray", ctx, storeType, k, arrayName, xKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullArray indicates an expected call of PullArray.
func (mr *MockStoreMockRecorder) PullArray(ctx, storeType, k, arrayName, xKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullArray", reflect.TypeOf((*MockStore)(nil).PullArray), ctx, storeType, k, arrayName, xKey)
}

// PushArray mocks base method.
func (m *MockStore) PushArray(ctx context.Context, storeType int, k interface{}, arrayName string, x interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushArray", ctx, storeType, k, arrayName, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushArray indicates an expected call of PushArray.
func (mr *MockStoreMockRecorder) PushArray(ctx, storeType, k, arrayName, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushArray", reflect.TypeOf((*MockStore)(nil).PushArray), ctx, storeType, k, arrayName, x)
}

// SaveHashObject mocks base method.
func (m *MockStore) SaveHashObject(storeType int, k, field, x interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHashObject", storeType, k, field, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHashObject indicates an expected call of SaveHashObject.
func (mr *MockStoreMockRecorder) SaveHashObject(storeType, k, field, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHashObject", reflect.TypeOf((*MockStore)(nil).SaveHashObject), storeType, k, field, x)
}

// SaveHashObjectFields mocks base method.
func (m *MockStore) SaveHashObjectFields(storeType int, k, field, x interface{}, fields map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHashObjectFields", storeType, k, field, x, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHashObjectFields indicates an expected call of SaveHashObjectFields.
func (mr *MockStoreMockRecorder) SaveHashObjectFields(storeType, k, field, x, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHashObjectFields", reflect.TypeOf((*MockStore)(nil).SaveHashObjectFields), storeType, k, field, x, fields)
}

// UpdateArray mocks base method.
func (m *MockStore) UpdateArray(ctx context.Context, storeType int, k interface{}, arrayName string, xKey interface{}, fields map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArray", ctx, storeType, k, arrayName, xKey, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArray indicates an expected call of UpdateArray.
func (mr *MockStoreMockRecorder) UpdateArray(ctx, storeType, k, arrayName, xKey, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArray", reflect.TypeOf((*MockStore)(nil).UpdateArray), ctx, storeType, k, arrayName, xKey, fields)
}

// UpdateFields mocks base method.
func (m *MockStore) UpdateFields(ctx context.Context, storeType int, k interface{}, fields map[string]interface{}, immediately ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, storeType, k, fields}
	for _, a := range immediately {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFields", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFields indicates an expected call of UpdateFields.
func (mr *MockStoreMockRecorder) UpdateFields(ctx, storeType, k, fields interface{}, immediately ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, storeType, k, fields}, immediately...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFields", reflect.TypeOf((*MockStore)(nil).UpdateFields), varargs...)
}

// UpdateOne mocks base method.
func (m *MockStore) UpdateOne(ctx context.Context, storeType int, k, x interface{}, immediately ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, storeType, k, x}
	for _, a := range immediately {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockStoreMockRecorder) UpdateOne(ctx, storeType, k, x interface{}, immediately ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, storeType, k, x}, immediately...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockStore)(nil).UpdateOne), varargs...)
}
