// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	cache "bitbucket.org/funplus/server/store/cache"
	db "bitbucket.org/funplus/server/store/db"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddStoreInfo mocks base method.
func (m *MockStore) AddStoreInfo(tp int, tblName, keyName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStoreInfo", tp, tblName, keyName)
}

// AddStoreInfo indicates an expected call of AddStoreInfo.
func (mr *MockStoreMockRecorder) AddStoreInfo(tp, tblName, keyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStoreInfo", reflect.TypeOf((*MockStore)(nil).AddStoreInfo), tp, tblName, keyName)
}

// DeleteFields mocks base method.
func (m *MockStore) DeleteFields(storeType int, k interface{}, fieldsName []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFields", storeType, k, fieldsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFields indicates an expected call of DeleteFields.
func (mr *MockStoreMockRecorder) DeleteFields(storeType, k, fieldsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFields", reflect.TypeOf((*MockStore)(nil).DeleteFields), storeType, k, fieldsName)
}

// DeleteObject mocks base method.
func (m *MockStore) DeleteObject(storeType int, k interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", storeType, k)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockStoreMockRecorder) DeleteObject(storeType, k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockStore)(nil).DeleteObject), storeType, k)
}

// Exit mocks base method.
func (m *MockStore) Exit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Exit")
}

// Exit indicates an expected call of Exit.
func (mr *MockStoreMockRecorder) Exit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exit", reflect.TypeOf((*MockStore)(nil).Exit))
}

// InitCompleted mocks base method.
func (m *MockStore) InitCompleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitCompleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// InitCompleted indicates an expected call of InitCompleted.
func (mr *MockStoreMockRecorder) InitCompleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitCompleted", reflect.TypeOf((*MockStore)(nil).InitCompleted))
}

// LoadObject mocks base method.
func (m *MockStore) LoadObject(storeType int, key, x interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadObject", storeType, key, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadObject indicates an expected call of LoadObject.
func (mr *MockStoreMockRecorder) LoadObject(storeType, key, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadObject", reflect.TypeOf((*MockStore)(nil).LoadObject), storeType, key, x)
}

// MigrateDbTable mocks base method.
func (m *MockStore) MigrateDbTable(tblName string, indexNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{tblName}
	for _, a := range indexNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateDbTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateDbTable indicates an expected call of MigrateDbTable.
func (mr *MockStoreMockRecorder) MigrateDbTable(tblName interface{}, indexNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tblName}, indexNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateDbTable", reflect.TypeOf((*MockStore)(nil).MigrateDbTable), varargs...)
}

// SaveFields mocks base method.
func (m *MockStore) SaveFields(storeType int, k interface{}, fields map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFields", storeType, k, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFields indicates an expected call of SaveFields.
func (mr *MockStoreMockRecorder) SaveFields(storeType, k, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFields", reflect.TypeOf((*MockStore)(nil).SaveFields), storeType, k, fields)
}

// SaveObject mocks base method.
func (m *MockStore) SaveObject(storeType int, k, x interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveObject", storeType, k, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveObject indicates an expected call of SaveObject.
func (mr *MockStoreMockRecorder) SaveObject(storeType, k, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObject", reflect.TypeOf((*MockStore)(nil).SaveObject), storeType, k, x)
}

// SetCache mocks base method.
func (m *MockStore) SetCache(arg0 cache.Cache) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCache", arg0)
}

// SetCache indicates an expected call of SetCache.
func (mr *MockStoreMockRecorder) SetCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCache", reflect.TypeOf((*MockStore)(nil).SetCache), arg0)
}

// SetDB mocks base method.
func (m *MockStore) SetDB(arg0 db.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDB", arg0)
}

// SetDB indicates an expected call of SetDB.
func (mr *MockStoreMockRecorder) SetDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDB", reflect.TypeOf((*MockStore)(nil).SetDB), arg0)
}
