// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// DeleteFields mocks base method.
func (m *MockDB) DeleteFields(tblName string, k interface{}, fieldsName []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFields", tblName, k, fieldsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFields indicates an expected call of DeleteFields.
func (mr *MockDBMockRecorder) DeleteFields(tblName, k, fieldsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFields", reflect.TypeOf((*MockDB)(nil).DeleteFields), tblName, k, fieldsName)
}

// DeleteObject mocks base method.
func (m *MockDB) DeleteObject(tblName string, k interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", tblName, k)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockDBMockRecorder) DeleteObject(tblName, k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockDB)(nil).DeleteObject), tblName, k)
}

// Exit mocks base method.
func (m *MockDB) Exit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Exit")
}

// Exit indicates an expected call of Exit.
func (mr *MockDBMockRecorder) Exit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exit", reflect.TypeOf((*MockDB)(nil).Exit))
}

// LoadObject mocks base method.
func (m *MockDB) LoadObject(tblName, key string, value, x interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadObject", tblName, key, value, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadObject indicates an expected call of LoadObject.
func (mr *MockDBMockRecorder) LoadObject(tblName, key, value, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadObject", reflect.TypeOf((*MockDB)(nil).LoadObject), tblName, key, value, x)
}

// MigrateTable mocks base method.
func (m *MockDB) MigrateTable(tblName string, indexNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{tblName}
	for _, a := range indexNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateTable indicates an expected call of MigrateTable.
func (mr *MockDBMockRecorder) MigrateTable(tblName interface{}, indexNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tblName}, indexNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateTable", reflect.TypeOf((*MockDB)(nil).MigrateTable), varargs...)
}

// SaveFields mocks base method.
func (m *MockDB) SaveFields(tblName string, k interface{}, fields map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFields", tblName, k, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFields indicates an expected call of SaveFields.
func (mr *MockDBMockRecorder) SaveFields(tblName, k, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFields", reflect.TypeOf((*MockDB)(nil).SaveFields), tblName, k, fields)
}

// SaveObject mocks base method.
func (m *MockDB) SaveObject(tblName string, k, x interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveObject", tblName, k, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveObject indicates an expected call of SaveObject.
func (mr *MockDBMockRecorder) SaveObject(tblName, k, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObject", reflect.TypeOf((*MockDB)(nil).SaveObject), tblName, k, x)
}
