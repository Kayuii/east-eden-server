// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// DeleteFields mocks base method.
func (m *MockDB) DeleteFields(colName string, k any, fieldsName []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFields", colName, k, fieldsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFields indicates an expected call of DeleteFields.
func (mr *MockDBMockRecorder) DeleteFields(colName, k, fieldsName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFields", reflect.TypeOf((*MockDB)(nil).DeleteFields), colName, k, fieldsName)
}

// DeleteObject mocks base method.
func (m *MockDB) DeleteObject(colName string, k any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", colName, k)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockDBMockRecorder) DeleteObject(colName, k any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockDB)(nil).DeleteObject), colName, k)
}

// Exit mocks base method.
func (m *MockDB) Exit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Exit")
}

// Exit indicates an expected call of Exit.
func (mr *MockDBMockRecorder) Exit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exit", reflect.TypeOf((*MockDB)(nil).Exit))
}

// LoadObject mocks base method.
func (m *MockDB) LoadObject(colName, key string, value, x any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadObject", colName, key, value, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadObject indicates an expected call of LoadObject.
func (mr *MockDBMockRecorder) LoadObject(colName, key, value, x any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadObject", reflect.TypeOf((*MockDB)(nil).LoadObject), colName, key, value, x)
}

// MigrateTable mocks base method.
func (m *MockDB) MigrateTable(colName string, indexNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{colName}
	for _, a := range indexNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateTable", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateTable indicates an expected call of MigrateTable.
func (mr *MockDBMockRecorder) MigrateTable(colName any, indexNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{colName}, indexNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateTable", reflect.TypeOf((*MockDB)(nil).MigrateTable), varargs...)
}

// SaveFields mocks base method.
func (m *MockDB) SaveFields(colName string, k any, fields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFields", colName, k, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFields indicates an expected call of SaveFields.
func (mr *MockDBMockRecorder) SaveFields(colName, k, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFields", reflect.TypeOf((*MockDB)(nil).SaveFields), colName, k, fields)
}

// SaveObject mocks base method.
func (m *MockDB) SaveObject(colName string, k, x any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveObject", colName, k, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveObject indicates an expected call of SaveObject.
func (mr *MockDBMockRecorder) SaveObject(colName, k, x any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObject", reflect.TypeOf((*MockDB)(nil).SaveObject), colName, k, x)
}
